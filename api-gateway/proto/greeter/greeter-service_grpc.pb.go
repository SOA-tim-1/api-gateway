// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: greeter/greeter-service.proto

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreeterService_Greet_FullMethodName     = "/GreeterService/Greet"
	GreeterService_GreetTest_FullMethodName = "/GreeterService/GreetTest"
)

// GreeterServiceClient is the client API for GreeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterServiceClient interface {
	Greet(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GreetTest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type greeterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterServiceClient(cc grpc.ClientConnInterface) GreeterServiceClient {
	return &greeterServiceClient{cc}
}

func (c *greeterServiceClient) Greet(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GreeterService_Greet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterServiceClient) GreetTest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GreeterService_GreetTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServiceServer is the server API for GreeterService service.
// All implementations must embed UnimplementedGreeterServiceServer
// for forward compatibility
type GreeterServiceServer interface {
	Greet(context.Context, *Request) (*Response, error)
	GreetTest(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGreeterServiceServer()
}

// UnimplementedGreeterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServiceServer struct {
}

func (UnimplementedGreeterServiceServer) Greet(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreeterServiceServer) GreetTest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetTest not implemented")
}
func (UnimplementedGreeterServiceServer) mustEmbedUnimplementedGreeterServiceServer() {}

// UnsafeGreeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServiceServer will
// result in compilation errors.
type UnsafeGreeterServiceServer interface {
	mustEmbedUnimplementedGreeterServiceServer()
}

func RegisterGreeterServiceServer(s grpc.ServiceRegistrar, srv GreeterServiceServer) {
	s.RegisterService(&GreeterService_ServiceDesc, srv)
}

func _GreeterService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterService_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServiceServer).Greet(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreeterService_GreetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServiceServer).GreetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterService_GreetTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServiceServer).GreetTest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterService_ServiceDesc is the grpc.ServiceDesc for GreeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GreeterService",
	HandlerType: (*GreeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreeterService_Greet_Handler,
		},
		{
			MethodName: "GreetTest",
			Handler:    _GreeterService_GreetTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeter/greeter-service.proto",
}

const (
	FollowerService_WriteUserRpc_FullMethodName                       = "/FollowerService/WriteUserRpc"
	FollowerService_FindByIdRpc_FullMethodName                        = "/FollowerService/FindByIdRpc"
	FollowerService_CreateFollowConnectionRpc_FullMethodName          = "/FollowerService/CreateFollowConnectionRpc"
	FollowerService_GetFollowsRpc_FullMethodName                      = "/FollowerService/GetFollowsRpc"
	FollowerService_GetFollowersRpc_FullMethodName                    = "/FollowerService/GetFollowersRpc"
	FollowerService_GetSuggestionsForUserRpc_FullMethodName           = "/FollowerService/GetSuggestionsForUserRpc"
	FollowerService_CheckIfFollowingConnectionExistRpc_FullMethodName = "/FollowerService/CheckIfFollowingConnectionExistRpc"
	FollowerService_DeleteFollowConnectionRpc_FullMethodName          = "/FollowerService/DeleteFollowConnectionRpc"
)

// FollowerServiceClient is the client API for FollowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerServiceClient interface {
	WriteUserRpc(ctx context.Context, in *WriteUserRequest, opts ...grpc.CallOption) (*Empty, error)
	FindByIdRpc(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error)
	CreateFollowConnectionRpc(ctx context.Context, in *CreateFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error)
	GetFollowsRpc(ctx context.Context, in *GetFollowsRequest, opts ...grpc.CallOption) (*FollowsResponse, error)
	GetFollowersRpc(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*FollowersResponse, error)
	GetSuggestionsForUserRpc(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*SuggestionsResponse, error)
	CheckIfFollowingConnectionExistRpc(ctx context.Context, in *CheckIfFollowingConnectionExistRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	DeleteFollowConnectionRpc(ctx context.Context, in *DeleteFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type followerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerServiceClient(cc grpc.ClientConnInterface) FollowerServiceClient {
	return &followerServiceClient{cc}
}

func (c *followerServiceClient) WriteUserRpc(ctx context.Context, in *WriteUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FollowerService_WriteUserRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) FindByIdRpc(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error) {
	out := new(FindByIdResponse)
	err := c.cc.Invoke(ctx, FollowerService_FindByIdRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) CreateFollowConnectionRpc(ctx context.Context, in *CreateFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FollowerService_CreateFollowConnectionRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetFollowsRpc(ctx context.Context, in *GetFollowsRequest, opts ...grpc.CallOption) (*FollowsResponse, error) {
	out := new(FollowsResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollowsRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetFollowersRpc(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*FollowersResponse, error) {
	out := new(FollowersResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollowersRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetSuggestionsForUserRpc(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*SuggestionsResponse, error) {
	out := new(SuggestionsResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetSuggestionsForUserRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) CheckIfFollowingConnectionExistRpc(ctx context.Context, in *CheckIfFollowingConnectionExistRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, FollowerService_CheckIfFollowingConnectionExistRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) DeleteFollowConnectionRpc(ctx context.Context, in *DeleteFollowConnectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FollowerService_DeleteFollowConnectionRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerServiceServer is the server API for FollowerService service.
// All implementations must embed UnimplementedFollowerServiceServer
// for forward compatibility
type FollowerServiceServer interface {
	WriteUserRpc(context.Context, *WriteUserRequest) (*Empty, error)
	FindByIdRpc(context.Context, *FindByIdRequest) (*FindByIdResponse, error)
	CreateFollowConnectionRpc(context.Context, *CreateFollowConnectionRequest) (*Empty, error)
	GetFollowsRpc(context.Context, *GetFollowsRequest) (*FollowsResponse, error)
	GetFollowersRpc(context.Context, *GetFollowersRequest) (*FollowersResponse, error)
	GetSuggestionsForUserRpc(context.Context, *GetSuggestionsRequest) (*SuggestionsResponse, error)
	CheckIfFollowingConnectionExistRpc(context.Context, *CheckIfFollowingConnectionExistRequest) (*CheckResponse, error)
	DeleteFollowConnectionRpc(context.Context, *DeleteFollowConnectionRequest) (*Empty, error)
	mustEmbedUnimplementedFollowerServiceServer()
}

// UnimplementedFollowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerServiceServer struct {
}

func (UnimplementedFollowerServiceServer) WriteUserRpc(context.Context, *WriteUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteUserRpc not implemented")
}
func (UnimplementedFollowerServiceServer) FindByIdRpc(context.Context, *FindByIdRequest) (*FindByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdRpc not implemented")
}
func (UnimplementedFollowerServiceServer) CreateFollowConnectionRpc(context.Context, *CreateFollowConnectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollowConnectionRpc not implemented")
}
func (UnimplementedFollowerServiceServer) GetFollowsRpc(context.Context, *GetFollowsRequest) (*FollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowsRpc not implemented")
}
func (UnimplementedFollowerServiceServer) GetFollowersRpc(context.Context, *GetFollowersRequest) (*FollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersRpc not implemented")
}
func (UnimplementedFollowerServiceServer) GetSuggestionsForUserRpc(context.Context, *GetSuggestionsRequest) (*SuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestionsForUserRpc not implemented")
}
func (UnimplementedFollowerServiceServer) CheckIfFollowingConnectionExistRpc(context.Context, *CheckIfFollowingConnectionExistRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfFollowingConnectionExistRpc not implemented")
}
func (UnimplementedFollowerServiceServer) DeleteFollowConnectionRpc(context.Context, *DeleteFollowConnectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollowConnectionRpc not implemented")
}
func (UnimplementedFollowerServiceServer) mustEmbedUnimplementedFollowerServiceServer() {}

// UnsafeFollowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerServiceServer will
// result in compilation errors.
type UnsafeFollowerServiceServer interface {
	mustEmbedUnimplementedFollowerServiceServer()
}

func RegisterFollowerServiceServer(s grpc.ServiceRegistrar, srv FollowerServiceServer) {
	s.RegisterService(&FollowerService_ServiceDesc, srv)
}

func _FollowerService_WriteUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).WriteUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_WriteUserRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).WriteUserRpc(ctx, req.(*WriteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_FindByIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).FindByIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_FindByIdRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).FindByIdRpc(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_CreateFollowConnectionRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFollowConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).CreateFollowConnectionRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_CreateFollowConnectionRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).CreateFollowConnectionRpc(ctx, req.(*CreateFollowConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetFollowsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollowsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollowsRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollowsRpc(ctx, req.(*GetFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetFollowersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollowersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollowersRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollowersRpc(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetSuggestionsForUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetSuggestionsForUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetSuggestionsForUserRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetSuggestionsForUserRpc(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_CheckIfFollowingConnectionExistRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfFollowingConnectionExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).CheckIfFollowingConnectionExistRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_CheckIfFollowingConnectionExistRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).CheckIfFollowingConnectionExistRpc(ctx, req.(*CheckIfFollowingConnectionExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_DeleteFollowConnectionRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).DeleteFollowConnectionRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_DeleteFollowConnectionRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).DeleteFollowConnectionRpc(ctx, req.(*DeleteFollowConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerService_ServiceDesc is the grpc.ServiceDesc for FollowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowerService",
	HandlerType: (*FollowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteUserRpc",
			Handler:    _FollowerService_WriteUserRpc_Handler,
		},
		{
			MethodName: "FindByIdRpc",
			Handler:    _FollowerService_FindByIdRpc_Handler,
		},
		{
			MethodName: "CreateFollowConnectionRpc",
			Handler:    _FollowerService_CreateFollowConnectionRpc_Handler,
		},
		{
			MethodName: "GetFollowsRpc",
			Handler:    _FollowerService_GetFollowsRpc_Handler,
		},
		{
			MethodName: "GetFollowersRpc",
			Handler:    _FollowerService_GetFollowersRpc_Handler,
		},
		{
			MethodName: "GetSuggestionsForUserRpc",
			Handler:    _FollowerService_GetSuggestionsForUserRpc_Handler,
		},
		{
			MethodName: "CheckIfFollowingConnectionExistRpc",
			Handler:    _FollowerService_CheckIfFollowingConnectionExistRpc_Handler,
		},
		{
			MethodName: "DeleteFollowConnectionRpc",
			Handler:    _FollowerService_DeleteFollowConnectionRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeter/greeter-service.proto",
}

const (
	TourService_FindTour_FullMethodName           = "/TourService/FindTour"
	TourService_FindTourByAuthorId_FullMethodName = "/TourService/FindTourByAuthorId"
	TourService_CreateTour_FullMethodName         = "/TourService/CreateTour"
	TourService_UpdateTour_FullMethodName         = "/TourService/UpdateTour"
	TourService_PublishTour_FullMethodName        = "/TourService/PublishTour"
	TourService_ArchiveTour_FullMethodName        = "/TourService/ArchiveTour"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	FindTour(ctx context.Context, in *FindTourRequest, opts ...grpc.CallOption) (*TourDto, error)
	FindTourByAuthorId(ctx context.Context, in *FindByAuthorIdRequest, opts ...grpc.CallOption) (*FindByAuthorIdResponse, error)
	CreateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error)
	UpdateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error)
	PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*PublishTourResponse, error)
	ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ArchiveTourResponse, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) FindTour(ctx context.Context, in *FindTourRequest, opts ...grpc.CallOption) (*TourDto, error) {
	out := new(TourDto)
	err := c.cc.Invoke(ctx, TourService_FindTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) FindTourByAuthorId(ctx context.Context, in *FindByAuthorIdRequest, opts ...grpc.CallOption) (*FindByAuthorIdResponse, error) {
	out := new(FindByAuthorIdResponse)
	err := c.cc.Invoke(ctx, TourService_FindTourByAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) CreateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error) {
	out := new(TourDto)
	err := c.cc.Invoke(ctx, TourService_CreateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error) {
	out := new(TourDto)
	err := c.cc.Invoke(ctx, TourService_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*PublishTourResponse, error) {
	out := new(PublishTourResponse)
	err := c.cc.Invoke(ctx, TourService_PublishTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ArchiveTourResponse, error) {
	out := new(ArchiveTourResponse)
	err := c.cc.Invoke(ctx, TourService_ArchiveTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility
type TourServiceServer interface {
	FindTour(context.Context, *FindTourRequest) (*TourDto, error)
	FindTourByAuthorId(context.Context, *FindByAuthorIdRequest) (*FindByAuthorIdResponse, error)
	CreateTour(context.Context, *TourDto) (*TourDto, error)
	UpdateTour(context.Context, *TourDto) (*TourDto, error)
	PublishTour(context.Context, *PublishTourRequest) (*PublishTourResponse, error)
	ArchiveTour(context.Context, *ArchiveTourRequest) (*ArchiveTourResponse, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTourServiceServer struct {
}

func (UnimplementedTourServiceServer) FindTour(context.Context, *FindTourRequest) (*TourDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTour not implemented")
}
func (UnimplementedTourServiceServer) FindTourByAuthorId(context.Context, *FindByAuthorIdRequest) (*FindByAuthorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTourByAuthorId not implemented")
}
func (UnimplementedTourServiceServer) CreateTour(context.Context, *TourDto) (*TourDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTourServiceServer) UpdateTour(context.Context, *TourDto) (*TourDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedTourServiceServer) PublishTour(context.Context, *PublishTourRequest) (*PublishTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTour not implemented")
}
func (UnimplementedTourServiceServer) ArchiveTour(context.Context, *ArchiveTourRequest) (*ArchiveTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTour not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_FindTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).FindTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_FindTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).FindTour(ctx, req.(*FindTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_FindTourByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByAuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).FindTourByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_FindTourByAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).FindTourByAuthorId(ctx, req.(*FindByAuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateTour(ctx, req.(*TourDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTour(ctx, req.(*TourDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_PublishTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).PublishTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_PublishTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).PublishTour(ctx, req.(*PublishTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_ArchiveTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).ArchiveTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_ArchiveTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).ArchiveTour(ctx, req.(*ArchiveTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTour",
			Handler:    _TourService_FindTour_Handler,
		},
		{
			MethodName: "FindTourByAuthorId",
			Handler:    _TourService_FindTourByAuthorId_Handler,
		},
		{
			MethodName: "CreateTour",
			Handler:    _TourService_CreateTour_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _TourService_UpdateTour_Handler,
		},
		{
			MethodName: "PublishTour",
			Handler:    _TourService_PublishTour_Handler,
		},
		{
			MethodName: "ArchiveTour",
			Handler:    _TourService_ArchiveTour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeter/greeter-service.proto",
}

const (
	CheckpointService_FindCheckpoint_FullMethodName         = "/CheckpointService/FindCheckpoint"
	CheckpointService_FindCheckpointByTourId_FullMethodName = "/CheckpointService/FindCheckpointByTourId"
	CheckpointService_CreateCheckpoint_FullMethodName       = "/CheckpointService/CreateCheckpoint"
	CheckpointService_DeleteCheckpoint_FullMethodName       = "/CheckpointService/DeleteCheckpoint"
)

// CheckpointServiceClient is the client API for CheckpointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckpointServiceClient interface {
	FindCheckpoint(ctx context.Context, in *FindCheckpointRequest, opts ...grpc.CallOption) (*CheckpointDto, error)
	FindCheckpointByTourId(ctx context.Context, in *FindByTourIdRequest, opts ...grpc.CallOption) (*FindByTourIdResponse, error)
	CreateCheckpoint(ctx context.Context, in *CheckpointDto, opts ...grpc.CallOption) (*CheckpointDto, error)
	DeleteCheckpoint(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type checkpointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckpointServiceClient(cc grpc.ClientConnInterface) CheckpointServiceClient {
	return &checkpointServiceClient{cc}
}

func (c *checkpointServiceClient) FindCheckpoint(ctx context.Context, in *FindCheckpointRequest, opts ...grpc.CallOption) (*CheckpointDto, error) {
	out := new(CheckpointDto)
	err := c.cc.Invoke(ctx, CheckpointService_FindCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointServiceClient) FindCheckpointByTourId(ctx context.Context, in *FindByTourIdRequest, opts ...grpc.CallOption) (*FindByTourIdResponse, error) {
	out := new(FindByTourIdResponse)
	err := c.cc.Invoke(ctx, CheckpointService_FindCheckpointByTourId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointServiceClient) CreateCheckpoint(ctx context.Context, in *CheckpointDto, opts ...grpc.CallOption) (*CheckpointDto, error) {
	out := new(CheckpointDto)
	err := c.cc.Invoke(ctx, CheckpointService_CreateCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointServiceClient) DeleteCheckpoint(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, CheckpointService_DeleteCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckpointServiceServer is the server API for CheckpointService service.
// All implementations must embed UnimplementedCheckpointServiceServer
// for forward compatibility
type CheckpointServiceServer interface {
	FindCheckpoint(context.Context, *FindCheckpointRequest) (*CheckpointDto, error)
	FindCheckpointByTourId(context.Context, *FindByTourIdRequest) (*FindByTourIdResponse, error)
	CreateCheckpoint(context.Context, *CheckpointDto) (*CheckpointDto, error)
	DeleteCheckpoint(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedCheckpointServiceServer()
}

// UnimplementedCheckpointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckpointServiceServer struct {
}

func (UnimplementedCheckpointServiceServer) FindCheckpoint(context.Context, *FindCheckpointRequest) (*CheckpointDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCheckpoint not implemented")
}
func (UnimplementedCheckpointServiceServer) FindCheckpointByTourId(context.Context, *FindByTourIdRequest) (*FindByTourIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCheckpointByTourId not implemented")
}
func (UnimplementedCheckpointServiceServer) CreateCheckpoint(context.Context, *CheckpointDto) (*CheckpointDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpoint not implemented")
}
func (UnimplementedCheckpointServiceServer) DeleteCheckpoint(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckpoint not implemented")
}
func (UnimplementedCheckpointServiceServer) mustEmbedUnimplementedCheckpointServiceServer() {}

// UnsafeCheckpointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckpointServiceServer will
// result in compilation errors.
type UnsafeCheckpointServiceServer interface {
	mustEmbedUnimplementedCheckpointServiceServer()
}

func RegisterCheckpointServiceServer(s grpc.ServiceRegistrar, srv CheckpointServiceServer) {
	s.RegisterService(&CheckpointService_ServiceDesc, srv)
}

func _CheckpointService_FindCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServiceServer).FindCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointService_FindCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServiceServer).FindCheckpoint(ctx, req.(*FindCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointService_FindCheckpointByTourId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByTourIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServiceServer).FindCheckpointByTourId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointService_FindCheckpointByTourId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServiceServer).FindCheckpointByTourId(ctx, req.(*FindByTourIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointService_CreateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServiceServer).CreateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointService_CreateCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServiceServer).CreateCheckpoint(ctx, req.(*CheckpointDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointService_DeleteCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServiceServer).DeleteCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointService_DeleteCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServiceServer).DeleteCheckpoint(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckpointService_ServiceDesc is the grpc.ServiceDesc for CheckpointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckpointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CheckpointService",
	HandlerType: (*CheckpointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCheckpoint",
			Handler:    _CheckpointService_FindCheckpoint_Handler,
		},
		{
			MethodName: "FindCheckpointByTourId",
			Handler:    _CheckpointService_FindCheckpointByTourId_Handler,
		},
		{
			MethodName: "CreateCheckpoint",
			Handler:    _CheckpointService_CreateCheckpoint_Handler,
		},
		{
			MethodName: "DeleteCheckpoint",
			Handler:    _CheckpointService_DeleteCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeter/greeter-service.proto",
}
