syntax = "proto3";

option go_package = "proto/greeter";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service GreeterService {
  rpc Greet(Request) returns (Response) {
    option (google.api.http) = {
      post: "/"
      body: "*"
    };
  }

  rpc GreetTest(Request) returns (Response) {
    option (google.api.http) = {
      get: "/"
    };
  }
}

message Request {
  string name = 1;
}

message Response {
  string greeting = 2;
}



service FollowerService {
  rpc WriteUserRpc (WriteUserRequest) returns (Empty) {}
  rpc FindByIdRpc (FindByIdRequest) returns (FindByIdResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-user/{id}"
    };
  }
  rpc CreateFollowConnectionRpc (CreateFollowConnectionRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/api/follower/follow-connection"
      body: "*"
    };
  }
  rpc GetFollowsRpc (GetFollowsRequest) returns (FollowsResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-follows/{id}"
    };
  }
  rpc GetFollowersRpc (GetFollowersRequest) returns (FollowersResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-followers/{id}"
    };
  }
  rpc GetSuggestionsForUserRpc (GetSuggestionsRequest) returns (SuggestionsResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-suggestions/{id}"
    };
  }
  rpc CheckIfFollowingConnectionExistRpc (CheckIfFollowingConnectionExistRequest) returns (CheckResponse) {
    option (google.api.http) = {
      get: "/api/follower/check-following/{following_id}/{followed_id}"
    };
  }
  rpc DeleteFollowConnectionRpc (DeleteFollowConnectionRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/follower/delete-follow-connection/{following_id}/{followed_id}"
    };
  }
}

// Poruke zahteva i odgovora
message FollowerDto {
  int64 id = 1;
}

message WriteUserRequest{
  FollowerDto userDto = 1;
}

message FindByIdResponse{
  FollowerDto userDto = 1;
}

message Followers{
  int64 followingId = 1;
  int64 followedId = 2;
}


message Empty {}
message FindByIdRequest {
  int64 id = 1;
}

message CreateFollowConnectionRequest {
  int64 followingId = 1;
  int64 followedId = 2;
}

message GetFollowsRequest {
  int64 id = 1;
}
message GetFollowersRequest {
  int64 id = 1;
}
message GetSuggestionsRequest {
  int64 id = 1;
}
message CheckIfFollowingConnectionExistRequest {
  int64 following_id = 1;
  int64 followed_id = 2;
}
message FollowsResponse {
  repeated int64 follows = 1;
}
message FollowersResponse {
  repeated int64 followers = 1;
} 
message SuggestionsResponse {
  repeated int64 suggestions = 1;
}
message CheckResponse {
  bool exists = 1;
}

message DeleteFollowConnectionRequest {
    int64 following_id = 1;
    int64 followed_id = 2;
  }

  enum Status {
    DRAFT = 0;
    PUBLISHED = 1;
    ARCHIVED = 2;
  }
  
  enum Difficult {
      EASY = 0;
      MEDIUM = 1;
      HARD = 2;
    }
  
  enum TravelMethod {
    CAR = 0;
    BICYCLE = 1;
    WALKING = 2;
  }
  
  message TourDto {
    int64 id = 1;
    int64 author_id = 2;
    string name = 3;
    string description = 4;
    Difficult difficult = 5; 
    Status status = 6;
    float price = 7;
    string tags = 8;
    float distance = 9;
    repeated CheckpointDto checkpoints = 10;
    google.protobuf.Timestamp publish_time = 11;
    google.protobuf.Timestamp archive_time = 12;
    repeated EquipmentDto equipments = 13;
    repeated TravelTimeAndMethodDto travel_time_and_method = 14;
  }
  
  message CheckpointDto {
    int64 id = 1;
    string name = 2;
    string description = 3;
    string picture_url = 4;
    double latitude = 5;
    double longitude = 6;
    int64 tour_id = 7;
  }

  
  message EquipmentDto {
    int64 id = 1;
    string name = 2;
    string description = 3;
  }
  
  message TravelTimeAndMethodDto {
    int64 travel_time = 1;
    TravelMethod travel_method = 2;
  }
  
  service TourService {
    rpc FindTour(FindTourRequest) returns (TourDto) {
      option (google.api.http) = {
        get: "/api/tour/{id}"
      };
    }
    rpc FindTourByAuthorId(FindByAuthorIdRequest) returns (FindByAuthorIdResponse) {
      option (google.api.http) = {
        get: "/api/tour/authortours/{author_id}"
      };
    }
    rpc CreateTour(TourDto) returns (TourDto) {
      option (google.api.http) = {
        post: "/api/tour"
        body: "*"
      };
    }
    rpc UpdateTour(TourDto) returns (TourDto) {
      option (google.api.http) = {
        put: "/api/tour/updatetour"
        body: "*"
      };
    }
    rpc PublishTour(PublishTourRequest) returns (PublishTourResponse) {
      option (google.api.http) = {
        put: "/api/tour/publish/{tour_id}"
        body: "*"
      };
    }
    rpc ArchiveTour(ArchiveTourRequest) returns (ArchiveTourResponse) {
      option (google.api.http) = {
        put: "/api/tour/archive/{tour_id}"
        body: "*"
      };
    }
  }
  
  message FindTourRequest {
    int64 id = 1;
  }
  
  message FindByAuthorIdRequest {
    int64 author_id = 1;
  }
  
  message FindByAuthorIdResponse {
    repeated TourDto tours = 1;
  }
  
  
  message PublishTourRequest {
    int64 tour_id = 1;
  }
  
  message PublishTourResponse {}
  
  message ArchiveTourRequest {
    int64 tour_id = 1;
  }
  
  message ArchiveTourResponse {}

  
  service CheckpointService {
    rpc FindCheckpoint(FindCheckpointRequest) returns (CheckpointDto) {
      option (google.api.http) = {
        get: "/api/checkpoint/{id}"
      };
    }
    rpc FindCheckpointByTourId(FindByTourIdRequest) returns (FindByTourIdResponse) {
      option (google.api.http) = {
        get: "/api/checkpoint/tour/{tour_id}"
      };
    }
    rpc CreateCheckpoint(CheckpointDto) returns (CheckpointDto) {
      option (google.api.http) = {
        post: "/api/checkpoint"
        body: "*"
      };
    }
    rpc DeleteCheckpoint(DeleteRequest) returns (DeleteResponse) {
      option (google.api.http) = {
        delete: "/api/checkpoint/{id}"
      };
    }
  }
  
  message FindCheckpointRequest {
    int64 id = 1;
  }
  
  message FindByTourIdRequest {
    int64 tour_id = 1;
  }
  
  message FindByTourIdResponse {
    repeated CheckpointDto checkpoints = 1;
  }
  
  
  message DeleteRequest {
    int64 id = 1;
  }
  
  message DeleteResponse {}