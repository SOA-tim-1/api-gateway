syntax = "proto3";

option go_package = "proto/greeter";

import "google/api/annotations.proto";

service GreeterService {
  rpc Greet(Request) returns (Response) {
    option (google.api.http) = {
      post: "/"
      body: "*"
    };
  }

  rpc GreetTest(Request) returns (Response) {
    option (google.api.http) = {
      get: "/"
    };
  }
}

message Request {
  string name = 1;
}

message Response {
  string greeting = 2;
}



service FollowerService {
  rpc WriteUserRpc (WriteUserRequest) returns (Empty) {}
  rpc FindByIdRpc (FindByIdRequest) returns (FindByIdResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-user/{id}"
    };
  }
  rpc CreateFollowConnectionRpc (CreateFollowConnectionRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/api/follower/follow-connection"
      body: "*"
    };
  }
  rpc GetFollowsRpc (GetFollowsRequest) returns (FollowsResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-follows/{id}"
    };
  }
  rpc GetFollowersRpc (GetFollowersRequest) returns (FollowersResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-followers/{id}"
    };
  }
  rpc GetSuggestionsForUserRpc (GetSuggestionsRequest) returns (SuggestionsResponse) {
    option (google.api.http) = {
      get: "/api/follower/get-suggestions/{id}"
    };
  }
  rpc CheckIfFollowingConnectionExistRpc (CheckIfFollowingConnectionExistRequest) returns (CheckResponse) {
    option (google.api.http) = {
      get: "/api/follower/check-following/{following_id}/{followed_id}"
    };
  }
  rpc DeleteFollowConnectionRpc (DeleteFollowConnectionRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/follower/delete-follow-connection/{following_id}/{followed_id}"
    };
  }
}

// Poruke zahteva i odgovora
message FollowerDto {
  int64 id = 1;
}

message WriteUserRequest{
  FollowerDto userDto = 1;
}

message FindByIdResponse{
  FollowerDto userDto = 1;
}

message Followers{
  int64 followingId = 1;
  int64 followedId = 2;
}


message Empty {}
message FindByIdRequest {
  int64 id = 1;
}

message CreateFollowConnectionRequest {
  int64 followingId = 1;
  int64 followedId = 2;
}

message GetFollowsRequest {
  int64 id = 1;
}
message GetFollowersRequest {
  int64 id = 1;
}
message GetSuggestionsRequest {
  int64 id = 1;
}
message CheckIfFollowingConnectionExistRequest {
  int64 following_id = 1;
  int64 followed_id = 2;
}
message FollowsResponse {
  repeated int64 follows = 1;
}
message FollowersResponse {
  repeated int64 followers = 1;
} 
message SuggestionsResponse {
  repeated int64 suggestions = 1;
}
message CheckResponse {
  bool exists = 1;
}

message DeleteFollowConnectionRequest {
    int64 following_id = 1;
    int64 followed_id = 2;
  }

  service Authorize {
    rpc Authorize (Credentials) returns (AuthenticationTokens) {
      option (google.api.http) = {
        post: "/api/users/login"
        body: "*"
      };
      
    }
    rpc Register (AccountRegistration) returns (AuthenticationTokens) {
      option (google.api.http) = {
        post: "/api/users"
        body: "*"
      };
    }
  }
  
  service UserService {
    rpc GetById (UserIdRequest) returns (UserDto){
      option (google.api.http) = {
        get: "/api/users/allUsers/GetById/{userId}"
      };
    };
  }
  
  service PersonService {
    rpc GetByUserId (PersonIdRequest) returns (PersonDto){
      option (google.api.http) = {
        get: "/api/person/{userId}"
      };
    };
  }
  
  message Credentials {
    string Username = 1;
    string Password = 2;
  }
  
  message AuthenticationTokens {
    int32 Id = 1;
    string AccessToken = 2;
  }
  
  message AccountRegistration {
    string Username = 1;
    string Password = 2;
    string Email = 3;
    string Name = 4;
    string Surname = 5;
    UserRole Role = 6;
  }
  
  enum UserRole {
    Administrator = 0;
    Author = 1;
    Tourist = 2;
  }
  
  message UserIdRequest {
    int64 userId = 1;
  }
  
  message UserDto {
    int64 Id = 1;
    string Username = 2;
    UserRole Role = 3;
    bool IsActive = 4;
  }
  
  message PersonIdRequest {
    int32 userId = 1;
  }
  
  message PersonDto {
    int64 Id = 1;
    int64 UserId = 2;
    string Name = 3;
    string Surname = 4;
    string Email = 5;
    string Motto = 6;
    string Biography = 7;
    string Image = 8;
    double Latitude = 9;
    double Longitude = 10;
  }